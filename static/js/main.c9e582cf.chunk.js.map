{"version":3,"sources":["InputForm/InputForm.js","HammingGraph/MyHistogram.js","HammingGraph/HammingGraph.js","Lists/ItemList.js","Lists/SortedItemList.js","App.js","index.js"],"names":["InputForm","formRef","React","createRef","inputRef","onFinish","values","props","onAdd","inputValue","current","resetFields","focus","cursor","onFinishFailed","errorInfo","console","log","layout","ref","this","Item","style","marginRight","flex","name","label","rules","required","message","pattern","RegExp","placeholder","type","shape","icon","PlusOutlined","htmlType","Component","ResponsiveHistogram","withParentSize","parentWidth","parentHeight","rest","Histogram","width","height","MyHistogram","rawData","data","length","ariaLabel","orientation","cumulative","normalized","binCount","binType","renderTooltip","event","datum","color","bin0","count","density","BarSeries","animated","fillOpacity","stroke","fill","DensitySeries","smoothing","showArea","kernel","XAxis","tickValues","xlabel","YAxis","HammingGraph","getHammingDistances","arr","Array","isArray","i","j","distance","hammingDistance","push","products","className","ItemList","listItems","items","map","el","index","SortedItemList","sort","App","state","handleAdd","item","setState","concat","onResetClick","gutter","justify","span","padding","title","block","RollbackOutlined","onClick","ReactDOM","render","id","size","GithubOutlined","target","href","document","getElementById"],"mappings":"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","file":"static/js/main.c9e582cf.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Form, Input , Button } from 'antd';\nimport { PlusOutlined} from '@ant-design/icons';\n\nexport default class InputForm extends React.Component {\n    formRef = React.createRef();\n    inputRef = React.createRef();\n\n    onFinish = (values) => {\n        // Notify listener of new addition\n        this.props.onAdd(values.inputValue);\n        \n        // reset values\n        this.formRef.current.resetFields();\n\n        // focus input field\n        this.inputRef.current.focus({\n            cursor: 'start',\n        });\n    }\n    \n    onFinishFailed = (errorInfo) => {\n        // Executed when invalid submit is fired\n        console.log('Failed:', errorInfo);\n    }\n\n    render() {\n        return (\n            <div>\n                <Form layout=\"inline\" ref={this.formRef} onFinish={this.onFinish} onFinishFailed={this.onFinishFailed}>\n                    <Form.Item style={{marginRight:5, flex:1}} name=\"inputValue\" label=\"Value\"\n                        rules={[{ required: true,  message:'Value is required'}, {pattern: new RegExp(/^\\d{5}$/), message: \"Use a string of 5 numbers (e.g. 12345)\"}]}>\n                        <Input ref={this.inputRef} placeholder=\"5-digit string (e.g. 12345)\" />\n                    </Form.Item> \n                    <Form.Item>\n                        <Button type=\"primary\" shape=\"circle\" icon={<PlusOutlined/>} htmlType=\"submit\"></Button>\n                    </Form.Item>\n                </Form>\n            </div>\n        );\n        }\n    }","import React from \"react\";\nimport {\n  Histogram,\n  DensitySeries,\n  withParentSize,\n  BarSeries,\n  XAxis,\n  YAxis\n} from \"@data-ui/histogram\";\n\nconst ResponsiveHistogram = withParentSize(\n  ({ parentWidth, parentHeight, ...rest }) => (\n    <Histogram width={parentWidth} height={parentHeight} {...rest} />\n  )\n);\n\n\nexport default class MyHistogram extends React.Component{\n  render(){\n    const rawData = this.props.data\n\n    // Not enought data to render histogram\n    if (rawData.length < 1){\n      console.log('Histogram could not be drawn because of limited data')\n      return null\n    } \n\n    return (\n      <div style={{ height: 300 }}>\n        <ResponsiveHistogram\n          ariaLabel=\"histogram\"\n          orientation=\"vertical\"\n          cumulative={false}\n          normalized={true}\n          binCount={5}\n          binType=\"numeric\"\n          renderTooltip={({ event, datum, data, color }) => (\n          <div>\n            <strong style={{ color }}>Group: {datum.bin0}</strong>\n            <div><strong>count </strong>{datum.count}</div>\n            <div><strong>cumulative </strong>{datum.cumulative}</div>\n            <div><strong>density </strong>{datum.density}</div>\n          </div>\n          )}\n        >\n          <BarSeries animated rawData={rawData} \n            fillOpacity={0.35}\n            stroke=\"#ff9203\"\n            fill=\"#ff9203\"\n          />\n          <DensitySeries animated rawData={rawData} \n            stroke=\"#FF0000\"\n            smoothing={0.01}\n            showArea={false}\n            kernel=\"gaussian\"\n          />\n          <XAxis tickValues={this.props.tickValues} label={this.props.xlabel}/>\n          <YAxis />\n        </ResponsiveHistogram>\n      </div>\n    );\n  }\n}","import React from 'react'\nimport hammingDistance from 'hamming'\nimport MyHistogram from './MyHistogram'\n\nexport default class HammingGraph extends React.Component {\n    getHammingDistances = (values) => {\n        let arr = []\n        \n        // Check if array else return empty rray\n        if (!Array.isArray(values)) return arr\n\n        // Compute hamming distance between all pairs\n        for(let i=0; i<=values.length; i++){\n            for(let j=i+1; j <=values.length -1; j++){\n                let distance = hammingDistance(values[i], values[j])\n                arr.push(distance)\n            }\n        }\n        return arr\n    }\n    \n    render() {\n        const products = this.getHammingDistances(this.props.values)\n\n        return (\n            <div>\n                <h1 className='align-center'> Hamming distance graph</h1>\n\n                {/* Check if enough data is available to draw histogram, else display message */}\n                {products.length >= 1 \n                    ? <MyHistogram data={products} tickValues={[1,2,3,4,5]} xlabel='Hamming distance'/>\n                    : <p className='red align-center'>Please add at least two values to render the histogram</p>\n                }\n            </div>\n        );\n        }\n    }\n\n","import React from 'react'\n\nexport default class ItemList extends React.Component {\n    render() {\n        // FIXME: This is a index based key, not recommended. Look at creating unique keys. \n        // For this use case this seems fine, as the list elements do not have indiviual actions.\n        const listItems = this.props.items.map((el, index) => \n            <li key={index}> {el}</li>\n        );\n\n        return (\n            <ul> {listItems}</ul>\n        );\n        }\n    }","import React from 'react'\nimport ItemList from './ItemList'\n\nexport default class SortedItemList extends React.Component {\n    render() {\n        return (\n            <ItemList items={this.props.items.sort()}/>\n        )\n    }\n}","import React from 'react'\nimport './App.css';\n\nimport InputForm from './InputForm/InputForm';\nimport HammingGraph from './HammingGraph/HammingGraph';\n\nimport { Button, Card, Divider} from 'antd';\nimport { Row, Col } from 'antd';\nimport { RollbackOutlined} from '@ant-design/icons';\nimport SortedItemList from './Lists/SortedItemList';\n\n\n\nexport default class App extends React.Component {\n    state = {\n        values: []\n    }\n\n    // Append new item to state\n    handleAdd = (item) => {\n        if (item){\n            this.setState( (state) => ({values: state.values.concat(item) }));\n        }\n    }\n\n    // Reset the current values\n    onResetClick = () => {\n        this.setState({values: []})\n    }\n\n    render() {\n        return (\n            <div>\n                <Row gutter={[16, 16]} justify='center'>\n                    <Col span={10} padding={20}>\n                        <Card className=\"card\" title=\"Add values\">\n                            <InputForm  items={this.state.values} onAdd={this.handleAdd}/> \n                            <Divider> values</Divider>\n                            <div className=\"sorted-list\">\n                                <SortedItemList  items={this.state.values}/>\n                            </div>\n                            <Divider></Divider>\n                            <Button block icon={<RollbackOutlined/>} onClick={this.onResetClick}>Clear values</Button>\n                        </Card>\n                    </Col>\n                    <Col span={14} padding={20}>\n                        <HammingGraph  values={this.state.values}/>\n                    </Col>\n                </Row>\n            </div>\n        );\n        }\n    }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js'\nimport Layout, { Content, Footer, Header } from 'antd/lib/layout/layout';\nimport { Button } from 'antd';\nimport { GithubOutlined} from '@ant-design/icons';\n\nReactDOM.render(\n  <Layout id=\"layout\">\n    <Header id='header'>\n        <h2 style={{color: 'white'}}>React hamming distance</h2>\n    </Header>\n  <Content className=\"site-layout\" id=\"content\" style={{ }}>\n    <div className=\"site-layout-background content-field\">\n      <App/>\n    </div>\n  </Content>\n  <Footer id=\"footer\">\n      <Button type='text' shape='round' size='large' icon={<GithubOutlined/>} target=\"#\" href=\"https://github.com/WSeubring/React-hamming-distance\">Github</Button>\n  </Footer>\n  </Layout>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}